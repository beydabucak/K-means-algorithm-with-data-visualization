# -*- coding: utf-8 -*-
"""Clustering_with_K_means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbHUNcIh91TZzNOWHXrZ71jiqSDzf6jR
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler, normalize
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")

"""READING DATA AND ANALYZING IT"""

dataset = pd.read_csv("data.csv")

dataset.head()

dataset.shape

dataset.info()

dataset.describe()

"""HANDLING NULL VALUES"""

dataset.isna().mean()*100

dataset.drop(["CUST_ID"], axis=1, inplace=True)

#Credit limit has just 1 nan value, so we just drop it to never think about it again
dataset.dropna(subset=['CREDIT_LIMIT'], inplace=True)

dataset['MINIMUM_PAYMENTS'].fillna(dataset['MINIMUM_PAYMENTS'].median(), inplace=True)

dataset.fillna(method = "ffill", inplace = True)
dataset.head()

"""VISUALISING THE DATASET"""

plt.figure(figsize = (20,40))
for i, column in enumerate(dataset.columns):
    if dataset[column].dtype != 'object':
        ax = plt.subplot(9, 2, i+1)
        sns.kdeplot(dataset[column], ax=ax)
        plt.xlabel(column)
plt.show()

plt.figure(figsize = (12,12))
sns.heatmap(dataset.corr(), annot=True)
plt.show()

"""PREPROCESSING WITH STANDARTSCALER"""

scaler = StandardScaler()
scaled_dataset = scaler.fit_transform(dataset)

#Normalizing data
normalized_dataset = normalize(scaled_dataset)
normalized_dataset = pd.DataFrame(normalized_dataset)

pca = PCA(n_components = 2)
X_pca = pca.fit_transform(normalized_dataset)

kmeans = KMeans(n_clusters=2, random_state=23)
kmeans.fit(X_pca)

kmeans_models = [KMeans(n_clusters=k, random_state=23).fit(X_pca) for k in range (1, 10)]
innertia = [model.inertia_ for model in kmeans_models]
plt.plot(range(1, 10), innertia)
plt.title('Elbow method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

plt.figure(figsize=(10,6))
dataset['cluster_id'] = kmeans.labels_
sns.scatterplot(data=dataset, x='ONEOFF_PURCHASES', y='PURCHASES', hue='cluster_id')
plt.title("Kümelerin ONEOFF_PURCHASES ve PURCHASES'e göre dağılımı" )
plt.show()

kmeans = KMeans(n_clusters=7, random_state=42)
predictions = kmeans.fit_predict(X_pca)

plt.figure(figsize = (5,5))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c = kmeans.labels_, cmap = 'magma')